<Django ORM>
ORM(Object-relational mapping 객체관계매핑)
- 데이터베이스의 데이터를 객체와 연결해주는 기능
- Model 클래스는 데이터베이스의 테이블(=모델) 형태 나타냄
- Model 클래스 통해 데이터를 가져올 때 모델의 objects 속성 사용
-> 전체 데이터 목록 가져오기 : 모델.objects.all()
-> 특정조건 만족하는 데이터 한개 정보 가져오기 : 모델.objects.get(조건)
-> 특정조건 만족하는 데이터들의 정보 가져오기 : 모델.objects.filter(조건)

----------------------------------------------------------------------------------
<웹에서 데이터 전송하는 방법>
- GET(주소창에 보여짐)
--> 서버에 보낼 데이터가 공개되어도 상관 없을때 사용

- POST
--> 요청 자체에 데이터를 담아보내며, 외부 노출하면 안되는 비밀값을 사용할 때 사용



user - url - view - model - db - model - view
               view - template - view

마이그레이션 : python manage.py makemigrations
python manage.py migrate


관리자페이지 - admin.py
-from burgers.models import Burger


-@admin.register(Burger)
-class BurgerAdmin(admin.ModelAdmin):
    pass

관리자계정 : python manage.py createsuperuser


-- 변수참조 : {{}}
-- 태그활용 : {%%}

--burer_search.html--
<html lang="ko">
    <body>
        <h1>pyburger의 햄버거 목록입니다.</h1>
	--검색창만들기--
          <div>
            <form method="GET"> <!--form: 브라우저에 데이터 보내기 위한 태그-->
                <input type="text" name="keyword">
                <button type="submit">검색</button>
            </form>
        </div>

        <h2>검색결과</h2>
        {% for burger in burgers %}
            <div>
                {{burger.name}}
                (가격 : {{burger.price}}원,
                칼로리 : {{burger.calories}}kcal)
            </div>
        {% endfor %}
    </body>
</html>

-- views.py--
# 이름에 전달받은 키워드 값이 포함된 버거 검색
    burgers = Burger.objects.filter(name__contains=keyword)
    context = {
        "burgers" : burgers,
    }
    return render(request, "burger_search.html", context)

 
